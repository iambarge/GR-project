%% config 
clc
clear

%% Select the best model according to CV
Type = 2.2;       % Pre-Processing type, selected by a number:
                %  1   - Crop
                %  2.1 - Resampling V.1 (slow)
                %  2.2 - Resampling V.2
                %  3   - Feature Based

N = 100;        % N of folds
Rate = 0.3;     % percentage of gestures in test set
load('GR_Dataset.mat', 'dataset');
classes = {'cerchio'; 'otto'; 'quadrato'; 'triangolo'; 'M'; 'S'; 'U'; 'V'; 'verticale'; 'orizzontale'};

group_labels = table2cell(dataset(:,1));
[X,class_labels] = gesturePreprocessing(dataset,Type);
[Confusion, Correctness, order, Mdl_best] = custom_MCCV(X,group_labels,classes,Rate,N);

%% Show Results
% Plot OoB Error
figure()
oobErrorBaggedEnsemble = oobError(Mdl_best);
plot(oobErrorBaggedEnsemble)
grid on
xlabel 'Number of grown trees';
ylabel 'Out-of-bag classification error';

% Confusion Matrices and Correctness Scores
Confusion_perc = zeros(length(classes));
partials = sum(transpose(Confusion));
for i=1:length(classes)
    for j=1:length(classes)
        Confusion_perc(i,j) = Confusion(i,j)/partials(i);
    end
end
Confusion
Confusion_perc
Mean_Correctness = mean(Correctness)
Correctness_variance = var(Correctness)

%% Save Best Model
type_labels = containers.Map([1,2.1,2.2,3],["Crop","Resamp_1","Resamp_2","Features"]);
model_name = ['Mdl_best_', type_labels(Type)];
save(model_name,'Mdl_best')

%% Predict Some (New) Gestures
i = randi(size(X,1));
test_data = X(i,:);

[pred_labels, scores, stdevs] = predict(Mdl_best,test_data);
% scores is a matrix with one row per observation and one column per class.
% For each observation and each class, the score generated by each tree is 
% the probability of this observation originating from this class computed 
% as the fraction of observations of this class in a tree leaf. predict 
% averages these scores over all trees in the ensemble.

disp('Real Label: ' + string(class_labels(i)))
disp('Predicted Label: ' + string(pred_labels))